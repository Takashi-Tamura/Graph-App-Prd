[{"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/reportWebVitals.ts":"1","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/App.tsx":"2","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Top.tsx":"3","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Molecules/Chart.tsx":"4","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Molecules/DisplayRecharts.tsx":"5","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/index.tsx":"6","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Templates/Contents.tsx":"7","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Footer/Footer.tsx":"8","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Constants/Strings.ts":"9","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Footer/style.tsx":"10","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/FaIcons/FaIconTemplate.tsx":"11","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/action.ts":"12","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Header.tsx":"13","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/types.ts":"14","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/index.ts":"15","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/saga.ts":"16","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/reducer.ts":"17","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/saga.ts":"18","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Firebase/base.ts":"19","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/index.ts":"20","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/AppBarMenu/AppBarMenu.tsx":"21","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/AuthProvider.tsx":"22","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/PrivateRoute.tsx":"23","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/SignUp.tsx":"24","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/AppBarMenu/Button.tsx":"25","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/SignIn.tsx":"26","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/media.ts":"27"},{"size":425,"mtime":1607307455468,"results":"28","hashOfConfig":"29"},{"size":964,"mtime":1608004969999,"results":"30","hashOfConfig":"31"},{"size":1209,"mtime":1608023943219,"results":"32","hashOfConfig":"29"},{"size":1614,"mtime":1608093500671,"results":"33","hashOfConfig":"29"},{"size":2536,"mtime":1608102290118,"results":"34","hashOfConfig":"29"},{"size":529,"mtime":1608004970023,"results":"35","hashOfConfig":"29"},{"size":542,"mtime":1607392110126,"results":"36","hashOfConfig":"31"},{"size":596,"mtime":1608102344536,"results":"37","hashOfConfig":"29"},{"size":537,"mtime":1608101633854,"results":"38","hashOfConfig":"31"},{"size":516,"mtime":1607321241433,"results":"39","hashOfConfig":"31"},{"size":346,"mtime":1608004970008,"results":"40","hashOfConfig":"31"},{"size":1415,"mtime":1608004970018,"results":"41","hashOfConfig":"29"},{"size":1087,"mtime":1607348730625,"results":"42","hashOfConfig":"31"},{"size":774,"mtime":1608098093858,"results":"43","hashOfConfig":"29"},{"size":478,"mtime":1608004970021,"results":"44","hashOfConfig":"29"},{"size":4477,"mtime":1608098093857,"results":"45","hashOfConfig":"29"},{"size":271,"mtime":1608004970022,"results":"46","hashOfConfig":"31"},{"size":154,"mtime":1607340502441,"results":"47","hashOfConfig":"31"},{"size":620,"mtime":1607383466699,"results":"48","hashOfConfig":"31"},{"size":1333,"mtime":1608004970019,"results":"49","hashOfConfig":"29"},{"size":1475,"mtime":1608102223507,"results":"50","hashOfConfig":"31"},{"size":2112,"mtime":1608101481447,"results":"51","hashOfConfig":"29"},{"size":367,"mtime":1607388278672,"results":"52","hashOfConfig":"31"},{"size":1872,"mtime":1608004660290,"results":"53","hashOfConfig":"31"},{"size":508,"mtime":1608004970008,"results":"54","hashOfConfig":"31"},{"size":1772,"mtime":1608101923968,"results":"55","hashOfConfig":"31"},{"size":798,"mtime":1608013163472,"results":"56","hashOfConfig":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1migem9",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3dwq1b",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/reportWebVitals.ts",[],[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/App.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Top.tsx",[],[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Molecules/Chart.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Molecules/DisplayRecharts.tsx",[],[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/index.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Templates/Contents.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Footer/Footer.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Constants/Strings.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Footer/style.tsx",[],["120","121"],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/FaIcons/FaIconTemplate.tsx",[],["122","123"],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/action.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Organisms/Header.tsx",[],["124","125"],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/types.ts",["126"],"// Action Type\nexport const SELECTCOUNTRY = \"GRAPH/SELECTCOUNTRY\" as const;\nexport const SELECT_UPDATE = \"GRAPH/SELECT_UPDATE\" as const;\nexport const ADDCOUNTRY = \"GRAPH/ADDCOUNTRY\" as const;\nexport const LOAD = \"GRAPH/LOAD\" as const;\nexport const SUCCESS_LOAD = \"GRAPH/SUCCESS_LOAD\" as const;\nexport const DELCOUNTRY = \"GRAPH/DELCOUNTRY\" as const;\nexport const DELETE_UPDATE = \"GRAPH/UPDATE\" as const;\n\n// State\nexport interface GraphState {\n  selectedCountryName: string;\n  selectedCountryData: GraphModel[];\n  countries: { [countryName: string]: GraphModel[]};\n  isLoading: boolean;\n}\n\nexport type GraphModel = {\n  Age: string,\n  Country: string,\n  Population: number,\n  Year: number,\n  docId: string,\n}\n\nexport type UserDataType = {\n  id: string,\n  countries: string[]\n}","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/index.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/saga.ts",["127"],"import { takeEvery, put, call, select } from \"redux-saga/effects\";\nimport { SELECTCOUNTRY, ADDCOUNTRY, LOAD, DELCOUNTRY, UserDataType, } from \"./types\";\nimport { GraphActionType, GraphActions } from \"./action\";\nimport { db, auth } from \"../../Firebase/base\";\nimport { CombineReducerType } from \"../reducer\";\n\n//type FirebaseDoc = firebase.firestore.QueryDocumentSnapshot<firebase.firestore.DocumentData>\n\nfunction* graphSaga() {\n  yield takeEvery(SELECTCOUNTRY, calcSelectCountry);\n  yield takeEvery(ADDCOUNTRY, calcAddCountry);\n  yield takeEvery(DELCOUNTRY, calcDelCountry);\n  yield takeEvery(LOAD, loadUserData);\n}\n\n/**\n * ユーザーデータ取得\n */\n\nfunction* loadUserData() {\n  const countries: string[] = yield call(requestUserData);\n  if (!countries[\"length\"]) return;\n\n  console.log(countries);\n  for(let i = 0; i < countries.length; ++i) {\n    const country = countries[i];\n    const snapshot = yield call(fetch, country);\n    const response = snapshot.docs.map((doc: any ) => doc.data())\n    // Updateアクションを発行\n    yield put(GraphActions.LoadSuccess(country, response));\n  }\n}\n\n/**\n * ユーザーデータ取得\n */\nconst requestUserData = async (): Promise<string[]> => {\n  const userId = auth().currentUser?.uid;\n  if (!userId) return [];\n  console.log(userId);\n  const ref = db.collection(\"users\").doc(userId);\n  const response = await ref.get()\n  const data = response.data() as UserDataType;\n  return (!data) ? [] : data.countries;\n}\n\n/**\n * Firestoreと通信して地域のデータを取得する関数\n */\nfunction* calcSelectCountry(action: GraphActionType) {\n  console.log(action)\n  // @ts-ignore: Unreachable code error\n  const country = action.payload.country\n  console.log(country)\n  const snapshot = yield call(fetch, country);\n  const response = snapshot.docs.map((doc: any ) => doc.data())\n\n  // Updateアクションを発行\n  yield put(GraphActions.SelectUpdate(country, response));\n}\n\n/**\n *  Firestoreからのデータ取得はラップ必要\n */\nconst fetch = async (country: string) => {\n  const colRef = db.collection(\"graphs\").where(\"Country\", \"==\", country).orderBy(\"Year\")\n  const data = await colRef.get()\n  return data\n};\n\n/**\n * Add Country\n */\n\n function* calcAddCountry(action: GraphActionType) {\n  // @ts-ignore: Unreachable code error\n  const country = action.payload.country\n  const snapshot = yield call(fetch, country);\n  const response = snapshot.docs.map((doc: any ) => doc.data())\n\n  // Firebase上に登録\n  yield call(requestUpdate, country)\n\n  yield put(GraphActions.SelectUpdate(country, response));\n }\n\n/**\n * 地域データの削除\n */\n\nfunction* calcDelCountry(action: GraphActionType) {\n  // @ts-ignore: Unreachable code error\n  const country = action.payload.country;\n  const countries = yield select( (state: CombineReducerType) => state.country.countries)\n  delete countries[country]\n\n  yield call(requestDelete, country);\n  yield put(GraphActions.DeleteUpdate(countries))\n}\n\n/**\n * Firebaseに現在選択している国を追加する\n * @param country 追加する国データ\n */\nconst requestUpdate = async (country: string) => {\n  await updateUser(country);\n}\n\n/**\n * 未リファクタリング \n * @param country\n * \n */\nconst updateUser = async (country: string) => {\n  const userId = auth().currentUser?.uid\n  const ref = db.collection(\"users\").doc(userId);\n  const snapShot = await ref.get()\n  const data = snapShot.data() as UserDataType;\n  if (!data && userId) {\n    // ユーザーとして存在していればユーザーデータ作成\n    createUserData(userId, country);\n  } else {\n    // 追加処理\n    if (data.countries.includes(country)) return;\n    await ref.set({\n      countries: data.countries.concat([country])\n    })\n  }\n}\n\n/**\n * ユーザー新規作成\n * @param userId\n * @param country\n */\nconst createUserData = async (userId: string, country: string) => {\n  const ref = await db.collection(\"users\")\n  await ref.doc(userId).set({\n    countries: [country]\n  })\n}\n\n/**\n * Firebaseから削除する地域データ\n * @param country 削除する地域データ\n */\nconst requestDelete = async (country: string) => {\n  const userId = auth().currentUser?.uid;\n  if (userId) {\n    const ref = db.collection(\"users\").doc(userId);\n    const data = await (await ref.get()).data() as UserDataType;\n    const filteredCountries = data.countries.filter(d => d !== country)\n    await ref.set({\n      countries: filteredCountries\n    })\n  }\n}\n\nexport default graphSaga;","/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/reducer.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/saga.ts",[],["128","129"],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Firebase/base.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Redux/Graph/index.ts",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/AppBarMenu/AppBarMenu.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/AuthProvider.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/PrivateRoute.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/SignUp.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Components/Atoms/AppBarMenu/Button.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/Auth/SignIn.tsx",[],"/Users/takashi.tamura/Takashi-Tamura-Portfolio/graph-app-prd/src/media.ts",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"130","replacedBy":"134"},{"ruleId":"132","replacedBy":"135"},{"ruleId":"130","replacedBy":"136"},{"ruleId":"132","replacedBy":"137"},{"ruleId":null,"fatal":true,"severity":2,"message":"138","line":2,"column":52},{"ruleId":null,"fatal":true,"severity":2,"message":"139","line":43,"column":32},{"ruleId":"130","replacedBy":"140"},{"ruleId":"132","replacedBy":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],["142"],["143"],"Parsing error: Unexpected token, expected \";\"\n\n  1 | // Action Type\n> 2 | export const SELECTCOUNTRY = \"GRAPH/SELECTCOUNTRY\" as const;\n    |                                                    ^\n  3 | export const SELECT_UPDATE = \"GRAPH/SELECT_UPDATE\" as const;\n  4 | export const ADDCOUNTRY = \"GRAPH/ADDCOUNTRY\" as const;\n  5 | export const LOAD = \"GRAPH/LOAD\" as const;","Parsing error: Unexpected token, expected \";\"\n\n  41 |   const ref = db.collection(\"users\").doc(userId);\n  42 |   const response = await ref.get()\n> 43 |   const data = response.data() as UserDataType;\n     |                                ^\n  44 |   return (!data) ? [] : data.countries;\n  45 | }\n  46 |",["142"],["143"],"no-global-assign","no-unsafe-negation"]